1 const命令
1.1 用于声明只读常量,一旦声明,常量的值就不能改变,一旦声明常量就必须立即初始化
1.1.1 const所声明的变量只在const命令所在的代码块内有效,{}即块级作用域中有效

1.2 不存在变量提升
1.2.1 var命令存在变量提升的现象,即变量可以在声明之前使用,值为undefined
1.2.2 const命令所声明的变量一定要在声明之后使用,否则便会报错

1.3 暂时性死区
1.3.1 只要块级作用域存在const命令,他所声明的变量就"绑定"这个区域,不再受外部的影响.只能在声明之后使用

1.4 不允许重复声明
1.4.1 const不允许在相同的作用域内重复声明同一个变量

1.5 本质
1.5.1 const实际上保证的并不是变量的值不得改动,而是变量指向的那个内存地址不得改动.
1.5.1.1 简单类型的数据(数值,字符串,布尔值)而言,值就保存在变量指向的内存地址中,因此等同于常量.
1.5.1.2 复合类型(对象和数组)而言,变量指向的内存地址保存的只是一个指针,const只能保证这个指针是固定的,而它指向的数据解构是不是可变的,这完全不能控制.

1.6冻结对象,应该使用Object.freeze方法
一个将对象彻底冻结的函数
var constantize = (obj)=>{
    Object.freeze(obj);
    Object.keys(obj).forEach((key,i)=>{
	if(typeof obj[key]==='object') {
	     constantize(obj[key])
	}
    })
}

