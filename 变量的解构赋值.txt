1 数组的解构赋值
1.1 按照一定模式从数组和对象中提取值,然后对变量进行赋值,称解构

1.2 本质上:写法属于"模式匹配",只要等号两边的模式相同,左边的变量就会被赋予对应的值

1.3 示例
let [foo, [[bar], baz]] = [1, [[2], 3]];
foo // 1
bar // 2
baz // 3
--------------------------------------
let [, , third]=["foo", "bar", "baz"];
third // "baz"
--------------------------------------
let [x, ,y]=[1, 2, 3];
x // 1
y // 3
--------------------------------------
let [head, ...tail] = [1, 2, 3, 4];
head // 1
tail // [2, 3, 4]
--------------------------------------
let [x, y,..z]=['a'];
x // "a"
y // undefined
z // []
--------------------------------------
let [foo]=[];
let [bar, foo]=[1];
如果解析不成功,变量的值就等于undefined,以上2个的foo的值都是undefined
--------------------------------------

1.4不完全解析:等号左边的模式只匹配一部分的等号右边的数组.
let [x, y]=[1, 2, 3];
x // 1
y // 3
--------------------------------------
let[a, [b], d] = [1, [2, 3], 4];
a // 1
b // 2
d // 4

1.5 如果等号右边不是数组(严格来说不是可遍历的结构),那么会报错
let [foo] = 1;
let [foo] = false;
let [foo] = NaN;
let [foo] = undefined;
let [foo] = null;
let [foo] = {};
上面的语句都会报错,应为等号右边的值或是转为对象(或本身)以后不具备Interator接口.

1.6 对于Set结构,也可以使用数组的解构赋值
let [x, y, z] = new Set(['a', 'b', 'c']);
x // "a"

2 默认值
